/* CSS is how you can add style to your website, such as colors, fonts, and positioning of your
   HTML content. To learn how to do something, just try searching Google for questions like
   "how to change link color." */

/* Testing: variables for colors */
:root { /* root selector */
  --red: #ff0000 /* variables must start with the two dashes */
}

body {
  background-color: white;
  color: black;
  /* font-family: Verdana; */
  font-family: 'Arimo', sans-serif;
  font-display: swap;
  min-height: 100vh; /* vh = viewport height so displays it to max of viewport height */
  /* text-align: center; */
}

.logo {
  width: 333px;
  padding: 9px;

  &.socmed {
    width: 33px;
    height: 33px;
    vertical-align: middle; /* aligns image with the text */
  }
}

.social {
  display: block;
  max-width: 500px;
  margin: 0 auto 15px auto;
  padding: 10px 5px;
  color: #000;
  border: 3px solid #000;
  border-radius: 25px;
  text-decoration: none; /* removes line underneath link */
  transition: all 222ms ease-in-out, transform .2s; /* can separate different transitions with comma. used transform to enlarge links when hovering. dunno if this is even working tho */

  &:hover {
    background-color: #000;
    color: #fff;
    transform: scale(1.02); /* transform links to scale x1.02. I wanted it to be a subtle change */
  } 

  &.carrd { /* pseudo-selector again or is it? Need to read up on this & thingy. Might be pseudo-element */
    background-color: #000;
    color: #fff;
    /* border: 3px solid var(--red); */

    &:hover {
      background-color: var(--red);
      color: #fff;
      border: 3px solid var(--red);
    }
  }

  /* editing hover colors */
  /* if you put this at the end instead of before the carrd pseudo-element(?), it applies to all elements of the class */
  /* &:hover {
    background-color: var(--red);
    color: #fff;
    transform: scale(1.02);
  } */
}

/* It dont work br ðŸ™ˆ 
  10.04 edit/fix?: it was inside the .social class. FIXME IT WORK NOW BUT NO WORKY AT SAME TIME */
.vidya {
  /* position: absolute; */
  margin: auto;
  /* top: 50%; */
  left: 50%;
  /* transform: translate(-50%, -50%); */
}

/*
 * doesn't work. I think it's because I didn't set display to "block". The way it looks as is fine for rn
.web_buttons {
  display: flex; /* flex box(?) on every device (no need to worry abt media queries).

  a {
    flex: 1;
    padding: 5px 10px;
    margin-right: 10px;

    &:last-child { /* pseudo-selector(?). So that last element of any length list gets 0px margin (i think)
      margin-right: 0px;
    }
  }
}
*/

/* code from w3schools.com collapsible how to */

/* Style the button that is used to open and close the collapsible content */
.collapsible {
  background-color: #fff;
  color: #333;
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
}

/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
.active, .collapsible:hover {
  background-color: #aaa;
}

/* extra attributes for collapsible after opening(?) */
.collapsible:after {
  content: "\002B";
  color: white;
  font-weight: bold;
  float: right;
  margin-left: 5px;
}


.active:after {
  content: "\2212";
}

/* Style the collapsible content. Note: hidden by default */
.content {
  padding: 0 18px;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.2s ease-out;
  background-color: #eee;
}

/* code from: redstapler.co how to add loading animation to website */

/* background color and setting up positions for items in loader */
.loader-wrapper {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #000;
  display: flex;
  justify-content: center;
  align-items: center;
}

.loader {
  display: inline-block;
  width: 30px;
  height: 30px;
  position: relative;
  border: 4px solid #fff;
  animation: loader 3s infinite ease;
}

.loader-inner {
  vertical-align: top;
  display: inline-block;
  width: 100%;
  background-color: #fff;
  animation: loader inner 3s infinite ease-in;
}

@keyframes loader {
  0% { transform: rotate(0deg); }
  25% { transform: rotate(180deg); }
  50% { transform: rotate(180deg); }
  75% { transform: rotate(360deg); }
  100% { transform: rotate(360deg); }
}

@keyframes loader-inner {
  0% { height: 0%; }
  25% { height: 0%; }
  50% { height: 100%; }
  75% { height: 100%; }
  100% { height: 0%; }
}